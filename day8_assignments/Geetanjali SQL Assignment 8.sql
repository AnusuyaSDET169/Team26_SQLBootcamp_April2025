--1.Create view vw_updatable_products (use same query whatever I used in the training)
--Try updating the view with the below query and see if the product table also gets updated.
--Update query:
--UPDATE updatable_products SET unit_price = unit_price * 1.1 WHERE units_in_stock < 10;

CREATE OR REPLACE VIEW VW_UPDATABLE_PRODUCTS AS
SELECT PRODUCT_ID,
	PRODUCT_NAME,
	UNIT_PRICE,
	UNITS_IN_STOCK,
	DISCONTINUED
FROM PRODUCTS
WHERE DISCONTINUED = 0 WITH CHECK OPTION


UPDATE VW_UPDATABLE_PRODUCTS
SET UNIT_PRICE = UNIT_PRICE * 1.1
WHERE UNITS_IN_STOCK < 10


SELECT PRODUCT_ID,
	UNIT_PRICE,
	UNITS_IN_STOCK
FROM PRODUCTS
WHERE UNITS_IN_STOCK < 10
	AND DISCONTINUED = 0



--2.Transaction:

--Update the product price for products by 10% in category id=1
--Try COMMIT and ROLLBACK and observe what happens.

BEGIN;

UPDATE PRODUCTS
SET UNIT_PRICE = UNIT_PRICE * 1.1
WHERE CATEGORY_ID = 1


SELECT *
FROM PRODUCTS
WHERE CATEGORY_ID = 1

ROLLBACK;

SELECT *
FROM PRODUCTS
WHERE CATEGORY_ID = 1


BEGIN;

UPDATE PRODUCTS
SET UNIT_PRICE = UNIT_PRICE * 1.1
WHERE CATEGORY_ID = 1


SELECT *
FROM PRODUCTS
WHERE CATEGORY_ID = 1



--3.Create a regular view which will have below details (Need to do joins):
--Employee_id, Employee_full_name, Title, Territory_id, territory_description, region_description

CREATE VIEW VW_EMPLOYEE_DETAILS AS
SELECT E.EMPLOYEE_ID,
	E.FIRST_NAME || ' ' || E.LAST_NAME AS EMPLOYEE_FULL_NAME,
	E.TITLE,
	ET.TERRITORY_ID,
	T.TERRITORY_DESCRIPTION,
	R.REGION_DESCRIPTION
FROM EMPLOYEES E
JOIN EMPLOYEE_TERRITORIES ET ON E.EMPLOYEE_ID = ET.EMPLOYEE_ID
JOIN TERRITORIES T ON ET.TERRITORY_ID = T.TERRITORY_ID
JOIN REGION R ON T.REGION_ID = R.REGION_ID


SELECT *
FROM VW_EMPLOYEE_DETAILS



4.Create a recursive CTE based on Employee Hierarchy

WITH RECURSIVE CTE_EMPLOYEE_HIERARCHY AS
	(SELECT EMPLOYEE_ID,
			FIRST_NAME,
			LAST_NAME,
			REPORTS_TO,
			0 AS LEVEL
		FROM EMPLOYEES E
		WHERE REPORTS_TO IS NULL
		UNION ALL SELECT E.EMPLOYEE_ID,
			E.FIRST_NAME,
			E.LAST_NAME,
			E.REPORTS_TO,
			EH.LEVEL + 1
		FROM EMPLOYEES E
		JOIN CTE_EMPLOYEE_HIERARCHY EH ON EH.EMPLOYEE_ID = E.REPORTS_TO)
SELECT LEVEL,
	EMPLOYEE_ID,
	FIRST_NAME || ' ' || LAST_NAME AS EMPLOYEE_NAME
FROM CTE_EMPLOYEE_HIERARCHY
ORDER BY LEVEL
