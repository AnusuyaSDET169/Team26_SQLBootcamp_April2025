Day3 Assignment SQLBOOTCAMP:

1)Update the categoryName From “Beverages” to "Drinks" in the categories table.
UPDATE categories
SET categoryname='Drinks'
where categoryname='Beverages'


2)Insert into the shipper new record (give any values) Delete that new record from the shippers table.
INSERT into shippers(shipperid,companyname)VALUES(4,'Amazon')

DELETE from shippers where shipperid=4

3)Update categoryID=1 to categoryID=1001. Make sure related products update their categoryID too. Display the both category and products table to show the cascade.
ALTER table products
DROP CONSTRAINT IF EXISTS products_categoryid_fkey

ALTER table products
ADD FOREIGN KEY (categoryID)
REFERENCES categories(categoryID)
ON UPDATE CASCADE
ON DELETE CASCADE;

UPDATE categories
SET categoryID = 1001
WHERE categoryID = 1;

SELECT * FROM products WHERE categoryID = 1001;


SELECT * FROM categories;

 Delete the categoryID= “3”  from categories. Verify that the corresponding records are deleted automatically from products.
ALTER table order_details
DROP CONSTRAINT IF Exists order_details_productid_fkey

ALTER table order_details
ADD CONSTRAINT order_details_productid_fkey FOREIGN KEY (productID)
REFERENCES products(productID)
ON UPDATE CASCADE
ON DELETE CASCADE;
DELETE from categories WHERE categoryID =3;


-- Verify cascade delete
SELECT * FROM categories;

SELECT * FROM products WHERE categoryID = 3;


4)      Delete the customer = “VINET”  from customers. Corresponding customers in orders table should be set to null (HINT: Alter the foreign key on orders(customerID) to use ON DELETE SET NULL)

ALTER TABLE orders
DROP CONSTRAINT orders_customerid_fkey;

ALTER TABLE orders
ADD CONSTRAINT fk_orders_customer
FOREIGN KEY (customerID)
REFERENCES customers(customerID)
ON DELETE SET NULL;

DELETE FROM customers
WHERE customerID = 'VINET';

5)Insert the following data to Products using UPSERT:
product_id = 100, product_name = Wheat bread, quantityperunit=1,unitprice = 13, discontinued = 0, categoryID=3
product_id = 101, product_name = White bread, quantityperunit=5 boxes,unitprice = 13, discontinued = 0, categoryID=3
product_id = 100, product_name = Wheat bread, quantityperunit=10 boxes,unitprice = 13, discontinued = 0, categoryID=3

(this should update the quantityperunit for product_id = 100)
INSERT INTO Products (productid, productname, quantityperunit, unitprice, discontinued, categoryID)
VALUES (100, 'Wheat bread', '1', 13, false, 3)
ON CONFLICT (productid) DO UPDATE
SET quantityperunit = EXCLUDED.quantityperunit;

INSERT INTO Products (productid, productname, quantityperunit, unitprice, discontinued, categoryID)
VALUES (101, 'White bread', '5 boxes', 13, false, 3),
                 (100,'Wheat bread','10 boxes',13,false,3)
ON CONFLICT (productid) DO UPDATE
SET quantityperunit = EXCLUDED.quantityperunit;

6)Write a MERGE query:
Create temp table with name:  ‘updated_products’ and insert values 
 
Update the price and discontinued status for from below table ‘updated_products’ only if there are matching products and updated_products .discontinued =0 

If there are matching products and updated_products .discontinued =1 then delete 
 
 Insert any new products from updated_products that don’t exist in products only if updated_products .discontinued =0.
MERGE INTO products_new p
USING (
	VALUES(100,'Wheat bread','10',20,true,3),
			(101,'White bread','5 boxes',19.99,false,3),
			(102,'Midnight Mango Fizz','24-12 oz bottles',19,false,1),
			(103,'Savory Fire Sauce','12-550ml bottles',10,false,2)
) AS incoming(productid,productname,quantityperunit,unitprice,discontinued,categoryid)
ON p.productid=incoming.productid
when matched and incoming.discontinued= true then
	DELETE 
when matched and incoming.discontinued=false then
    UPDATE SET 
	productname=incoming.productname,
	unitprice=incoming.unitprice
when not matched and incoming.discontinued=false then
	INSERT(productid,productname,quantityperunit,unitprice,discontinued,categoryid)
	VALUES(incoming.productid,incoming.productname,incoming.quantityperunit,incoming.unitprice,incoming.discontinued,incoming.categoryid)
	


7)List all orders with employee full names. (Inner join)

SELECT o.order_id,(first_name || ' ' || last_name) AS employeeName from orders o
JOIN employees e on o.employee_id=o.employee_id













